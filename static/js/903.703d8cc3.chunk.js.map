{"version":3,"file":"static/js/903.703d8cc3.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsBook.contacts.items;\nexport const selectIsLoading = state => state.contactsBook.contacts.isLoading;\nexport const selectError = state => state.contactsBook.contacts.error;\nexport const selectFilter = state => state.contactsBook.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectFilter, selectContacts],\n  (savedFilter, items) => {\n    const normalizedFilter = savedFilter.toLowerCase();\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formBtn\":\"ContactForm_formBtn__qZGY3\",\"error\":\"ContactForm_error__C1smZ\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport Notiflix from 'notiflix';\nimport * as Yup from 'yup';\nimport css from './ContactForm.module.css';\n\n// init.values and schema for Formik\nconst initialValues = { name: '', number: '' };\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Must be at least 2 characters long')\n    .max(70, 'Must be no more than 70 characters long'),\n  number: Yup.number(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const isInContacts = contacts.find(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isInContacts) {\n      Notiflix.Notify.failure(`${values.name} is already in contacts!`, {\n        position: 'left-top',\n        distance: '10px',\n      });\n      return;\n    }\n    dispatch(\n      addContact({\n        name: values.name,\n        number: values.number,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <>\n      <h1 className=\"formTitle\">Phonebook</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form className={css.form} autoComplete=\"off\">\n          <label className={css.formLabel} htmlFor=\"name\">\n            Name\n            <Field className={css.formInput} type=\"text\" name=\"name\" required />\n            <span className={css.error}>\n              <ErrorMessage name=\"name\" />\n            </span>\n          </label>\n          <label className={css.formLabel} htmlFor=\"number\">\n            Number\n            <Field\n              className={css.formInput}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"+380\"\n              required\n            />\n            <span className={css.error}>\n              <ErrorMessage name=\"number\" />\n            </span>\n          </label>\n          <button className={css.formBtn} type=\"submit\">\n            Add contact\n          </button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/slice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport css from './Filter.module.css';\nexport function Filter() {\n  const dispatch = useDispatch();\n  const savedFilter = useSelector(selectFilter);\n\n  function filterContacts(evt) {\n    const valueFilter = evt.target.value.trim();\n    dispatch(setFilter(valueFilter));\n  }\n  return (\n    <div>\n      <h2 className=\"contactsTitle\">Contacts</h2>\n      <p className={css.filter}>Find contacts by name</p>\n      <input\n        className={css.filterInput}\n        type=\"text\"\n        onChange={filterContacts}\n        value={savedFilter}\n        name=\"filter\"\n      />\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"deleteBtn\":\"ContactList_deleteBtn__1dg25\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilteredContacts, selectFilter } from 'redux/contacts/selectors';\nimport css from './ContactList.module.css';\n\nexport function ContactList() {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const savedFilter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(({ id, name, number }) => (\n        <li className={css.contactItem} key={id}>\n          {name} : {number}\n          <button\n            className={css.deleteBtn}\n            onClick={() => dispatch(deleteContact(id))}\n            name=\"delete\"\n            value={savedFilter}\n            type=\"button\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectIsLoading,\n  selectContacts,\n  selectError,\n} from 'redux/contacts/selectors';\n\nconst spinnerStyle = {\n  padding: '5px 65px',\n  position: 'absolute',\n};\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      {isLoading && (\n        <ThreeDots\n          height=\"20\"\n          width=\"50\"\n          radius=\"10\"\n          color=\"#9B5CFF\"\n          wrapperClassName=\"spinner\"\n          wrapperStyle={spinnerStyle}\n          visible={true}\n        />\n      )}\n      {error && <b>{error}</b>}\n      {contacts.length !== 0 && <ContactList />}\n    </>\n  );\n}\n"],"names":["selectContacts","state","contactsBook","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","savedFilter","normalizedFilter","toLowerCase","name","includes","initialValues","number","schema","Yup","shape","min","max","ContactForm","dispatch","useDispatch","useSelector","className","validationSchema","onSubmit","values","resetForm","find","Notiflix","position","distance","addContact","css","autoComplete","htmlFor","type","required","placeholder","Filter","onChange","evt","valueFilter","target","value","trim","setFilter","ContactList","filteredContacts","map","id","onClick","deleteContact","spinnerStyle","padding","ContactsPage","useEffect","fetchContacts","height","width","radius","color","wrapperClassName","wrapperStyle","visible","length"],"sourceRoot":""}