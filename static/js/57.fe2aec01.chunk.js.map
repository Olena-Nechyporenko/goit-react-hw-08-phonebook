{"version":3,"file":"static/js/57.fe2aec01.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/pages/Contacts/ContactsPage.module.css?3d45","pages/Contacts/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsBook.contacts.items;\nexport const selectIsLoading = state => state.contactsBook.contacts.isLoading;\nexport const selectError = state => state.contactsBook.contacts.error;\nexport const selectFilter = state => state.contactsBook.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectFilter, selectContacts],\n  (savedFilter, items) => {\n    const normalizedFilter = savedFilter.toLowerCase();\n    return items.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"contactFormWrap\":\"ContactForm_contactFormWrap__JSni7\",\"formTitle\":\"ContactForm_formTitle__N6O4g\",\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\",\"formBtn\":\"ContactForm_formBtn__qZGY3\",\"error\":\"ContactForm_error__C1smZ\"};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport Notiflix from 'notiflix';\nimport * as Yup from 'yup';\nimport css from './ContactForm.module.css';\n\n// init.values and schema for Formik\nconst initialValues = { name: '', number: '' };\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Must be at least 2 characters long')\n    .max(70, 'Must be no more than 70 characters long'),\n  number: Yup.number(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const isInContacts = contacts.find(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isInContacts) {\n      Notiflix.Notify.failure(`${values.name} is already in contacts!`, {\n        position: 'left-top',\n        distance: '10px',\n      });\n      return;\n    }\n    dispatch(\n      addContact({\n        name: values.name,\n        number: values.number,\n      })\n    );\n    resetForm();\n  };\n\n  return (\n    <div className={css.contactFormWrap}>\n      <h1 className={css.formTitle}>Phonebook</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form className={css.form} autoComplete=\"off\">\n          <label className={css.formLabel} htmlFor=\"name\">\n            Name\n            <Field className={css.formInput} type=\"text\" name=\"name\" required />\n            <span className={css.error}>\n              <ErrorMessage name=\"name\" />\n            </span>\n          </label>\n          <label className={css.formLabel} htmlFor=\"number\">\n            Number\n            <Field\n              className={css.formInput}\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"+380\"\n              required\n            />\n            <span className={css.error}>\n              <ErrorMessage name=\"number\" />\n            </span>\n          </label>\n          <button className={css.formBtn} type=\"submit\">\n            Add contact\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterWrap\":\"Filter_filterWrap__xOHoa\",\"contactsTitle\":\"Filter_contactsTitle__eTnDx\",\"inputWrap\":\"Filter_inputWrap__XEHXz\",\"filterText\":\"Filter_filterText__QGy-k\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { ThreeDots } from 'react-loader-spinner';\nimport { setFilter } from 'redux/contacts/slice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport css from './Filter.module.css';\n\nconst spinnerStyle = {\n  padding: '5px 65px',\n  position: 'absolute',\n  bottom: '-20px',\n  left: '60px',\n};\nexport function Filter() {\n  const dispatch = useDispatch();\n  const savedFilter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n\n  function filterContacts(evt) {\n    const valueFilter = evt.target.value.trim();\n    dispatch(setFilter(valueFilter));\n  }\n  return (\n    <div className={css.filterWrap}>\n      <h2 className={css.contactsTitle}>Contacts</h2>\n      <div className={css.inputWrap}>\n        <p className={css.filterText}>Find contacts by name</p>\n        <input\n          className={css.filterInput}\n          type=\"text\"\n          onChange={filterContacts}\n          value={savedFilter}\n          name=\"filter\"\n        />\n      </div>\n      {isLoading && (\n        <ThreeDots\n          height=\"20\"\n          width=\"50\"\n          radius=\"10\"\n          color=\"#9B5CFF\"\n          wrapperClassName=\"spinner\"\n          wrapperStyle={spinnerStyle}\n          visible={true}\n        />\n      )}\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"noContact\":\"ContactList_noContact__7t3Lb\",\"contactList\":\"ContactList_contactList__UFVCg\",\"contactIcon\":\"ContactList_contactIcon__nWatp\",\"contactItem\":\"ContactList_contactItem__ppNQ5\",\"deleteBtn\":\"ContactList_deleteBtn__1dg25\",\"deleteIcon\":\"ContactList_deleteIcon__-gWLm\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectFilteredContacts, selectFilter } from 'redux/contacts/selectors';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { IoIosContact } from 'react-icons/io';\nimport { MdDelete } from 'react-icons/md';\nimport css from './ContactList.module.css';\n\nexport function ContactList() {\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const savedFilter = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <ul className={css.contactList}>\n      {contacts.length === 0 ? (\n        <span className={css.noContact}>\n          You have no contacts in the phonebook yet\n        </span>\n      ) : (\n        <>\n          {filteredContacts.map(({ id, name, number }) => (\n            <li className={css.contactItem} key={id}>\n              <IoIosContact size={25} className={css.contactIcon} />\n              {name} : {number}\n              <button\n                className={css.deleteBtn}\n                onClick={() => dispatch(deleteContact(id))}\n                name=\"delete\"\n                value={savedFilter}\n                type=\"button\"\n              >\n                <MdDelete size={22} className={css.deleteIcon} />\n              </button>\n            </li>\n          ))}\n        </>\n      )}\n    </ul>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsWrap\":\"ContactsPage_contactsWrap__uEBMj\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError } from 'redux/contacts/selectors';\nimport css from './ContactsPage.module.css';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.contactsWrap}>\n      <ContactForm />\n      <Filter />\n      {error && <b>{error}</b>}\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contactsBook","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","savedFilter","normalizedFilter","toLowerCase","name","includes","initialValues","number","schema","Yup","shape","min","max","ContactForm","dispatch","useDispatch","useSelector","className","css","validationSchema","onSubmit","values","resetForm","find","Notiflix","position","distance","addContact","autoComplete","htmlFor","type","required","placeholder","spinnerStyle","padding","bottom","left","Filter","onChange","evt","valueFilter","target","value","trim","setFilter","height","width","radius","color","wrapperClassName","wrapperStyle","visible","ContactList","filteredContacts","length","map","id","size","onClick","deleteContact","ContactsPage","useEffect","fetchContacts"],"sourceRoot":""}